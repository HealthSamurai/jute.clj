---
suite: $fn directive
tests:
  - desc: allows to declare function to be callable from expresssion
    scope:
      foo: 1.0
    template:
      $let:
        fooToBar:
          $fn: [fooArg, otherArg]
          $body: $ fooArg + 3 - otherArg
      $body: $ foo + fooToBar(foo, 3.0)

    result: 2.0

  - desc: fn directive can into closures
    scope:
      foo: 1.0
    template:
      $let:
        someStuff: "world"
      $body:
        $let:
          greetStuff:
            $fn: [greeting]
            $body: $ greeting + someStuff
        $body: $ greetStuff("hello, ")

    result: hello, world

  - desc: fn directive can into recursion
    scope: null
    template:
      $let:
        recFn:
          $fn: [i]
          $name: recFn
          $body:
            $if: $ i < 10
            $then: $ recFn(i + 1)
            $else: $ i
      $body: $ recFn(0)
    result: 10

  - desc: fn directive fibonacci example
    scope: null
    template:
      $let:
        fib:
          $fn: ["n"]
          $name: fib
          $body: 
            $if: $ n <= 1
            $then: 1
            $else: $ fib(n - 1) + fib(n - 2)

      $body: $ fib(10)
    result: 89

